% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Project.R
\name{EM_Gamma}
\alias{EM_Gamma}
\title{EM Algorithm for Gamma Mixture Models}
\usage{
EM_Gamma(ZoneData, Anti, Bac, k, a = 2, b = 1, epsilon = 1e-05,
  quant = 0.01)
}
\arguments{
\item{ZoneData}{data frame of the zonediameter Data from web scraping.}

\item{Anti}{the chosen Antimicrobial for the analysis.}

\item{Bac}{the chosen Bacterium for the analysis.}

\item{k}{the chosen number of cluster.}

\item{a}{the scale parameter of the inverse gamma distribution used for the penalty. Default to 2.}

\item{b}{the rate parameter of the inverse gamma distribution used for the penalty. Default to 1.}

\item{epsilon}{the stopping criteria for the algorithm. Default to 0.00001.}

\item{quant}{the quantile used for the ECOFF. Default to 0.01.}
}
\value{
A list with the components:

\itemize{
 \item{Pi (the estimated mixture weights)}
 \item{Alpha (the estimated scale parameters for the gamma distribution)}
 \item{Beta (the estimated rate parameters for the gamma distribution)}
 \item{AIC (the akaike information criterion)}
 \item{BIC (the bayesian information criterion)}
 \item{Ecoff (the value for the Ecoff)}
}
}
\description{
EM_Gamma is used to perform an EM-Algorithm for binned data, using Gamma Mixture Models. It computes an ECOFF value as well as an AIC-value and BIC-value for model comparison.
}
\details{
At first clustering with quantiles method is used. The data is split into clusters with equal amount of data values. Afterwards the parameters pi, alpha and beta are initialized using moment estimation.
The EM-Algorithm consists of an E-Step and a M-Step. The algorithm is an iterative process that updates the parameters and increases the log-likelihood at each iteration, until a stopping criteria epsilon is reached.
In the E-Step the initialized values are used to compute p_j^(i)
           p_j^(i)= sum_(k=1)^K pi_k^(i) * integral_(a_j)^(b_j) f_k(x|vartheta_k^(i))dx
and p_jk^(i)
           p_jk^(i) = [pi_k^(i) * integral_(a_j)^(b_j) f_k(x|vartheta_k^(i))dx] / p_j^(i),
with f_k(x) as the density of k-th gamma mixture component.
In each M-Step the expectation of the complete log-likelihood at the i-th step has to be maximized. The maximization with respect to pi yields to
           pi_k^(i+1)= [sum_(j=1)^J n_j*p_jk^(i)] / [tilde(N)]
Using optim as the general purpose optimizer, the estimators of alpha and beta are maximized.
This algorithm is repeated until
           |l^(i+1)-l^(i)| < epsilon,
with l^(i) being the complete data log-likelihood at the i-th step.
Finally, AIC, BIC and the ECOFF-value get computed using the calculated parameters alpha, beta and pi.
}
\examples{
data("ZoneData") #loading the Zone Diameter-Data from a CSV-file

# example 1
# plotting the frequencies of the Zone Diameters for visual checking
# selecting the cells with Zone Diameters of a specific combination of Antimicrobial and Bacterium
ZDs <- subset(ZoneData, Antimicrobial == "Ampicillin" & Bacterium == "Escherichia coli",
              grepl("^Z", colnames(ZoneData)))

example <- data.frame(ZD = as.integer(gsub("^Z", "", colnames(ZDs))), # creating a dataframe
                      Freq = unname(unlist(ZDs)))

plot(Freq ~ ZD, data = example, type = "h") #plotting the frequencies of the Zone Diameters

#as the visual checking of the plot suggests a distribution with 1 component k will be chosen as 1

# calling the EM_Gamma-function with a specific combination of
# Antimicrobial, Bacterium, k and epsilon as default
est <- EM_Gamma(ZoneData = ZoneData, Anti = "Ampicillin", Bac = "Escherichia coli",
                k = 1, epsilon = 0.001)
est # showing the parameters of the distribution, AIC, BIC and Ecoff

# geting the theoretical data values for the histogramm
Data <- unname(unlist(ZDs))[-1]
dia <- as.integer(gsub("^Z", "", colnames(ZDs)))[-1]

y <- vector("numeric")

for (i in 1:length(Data)) {
  if (Data[i] == 1) {
    y <- c(y, dia[i])
  } else{
    y <- c(y, seq(dia[i]-0.5, dia[i]+0.5, length.out = Data[i]))
  }
}

# plotting the histogramm of the data
hist(y, breaks=seq(0,50,length=50), freq = FALSE, main="Ampicillin & Escherichia coli",
     xlab="Zone Diameter", ylab="Density")

# plotting the fitted density
lines(seq(0, 50, length = 1000),
      est$Pi[1]*dgamma(seq(0, 50, length = 1000), shape = est$Alpha[1], rate = est$Beta[1]),
      col = 2, lwd = 2)

# example 2
# plotting the frequencies of the Zone Diameters for visual checking
# selecting the cells with Zone Diameters of a specific combination of Antimicrobial and Bacterium
ZDs <- subset(ZoneData, Antimicrobial == "Piperacillin" & Bacterium == "Escherichia coli",
              grepl("^Z", colnames(ZoneData)))

example <- data.frame(ZD = as.integer(gsub("^Z", "", colnames(ZDs))), # creating a dataframe
                      Freq = unname(unlist(ZDs)))

plot(Freq ~ ZD, data = example, type = "h") #plotting the frequencies of the Zone Diameters

# as the visual checking of the plot suggests a distribution with 2 components k will be chosen as 2
# calling the EM_Gamma-function with a specific combination of
# Antimicrobial, Bacterium, k and epsilon as default
est <- EM_Gamma(ZoneData = ZoneData, Anti = "Piperacillin", Bac = "Escherichia coli",
                k = 2, epsilon = 0.001)
est #showing the parameters of the distributions, AIC, BIC and Ecoff

# geting the theoretical data values for the histogramm
Data <- unname(unlist(ZDs))[-1]
dia <- as.integer(gsub("^Z", "", colnames(ZDs)))[-1]

y <- vector("numeric")

for (i in 1:length(Data)) {
  if (Data[i] == 1) {
    y <- c(y, dia[i])
  } else{
    y <- c(y, seq(dia[i]-0.5, dia[i]+0.5, length.out = Data[i]))
  }
}

# plotting the histogramm of the data
hist(y, breaks=seq(0,50,length=50), freq = FALSE, main="Piperacillin & Escherichia coli",
     xlab="Zone Diameter", ylab="Density")

# plotting the fitted density
lines(seq(0, 50, length = 1000),
      est$Pi[1]*dgamma(seq(0, 50, length = 1000), shape = est$Alpha[1], rate = est$Beta[1])
      +est$Pi[2]*dgamma(seq(0, 50, length = 1000), shape = est$Alpha[2], rate = est$Beta[2]),
      col = 2, lwd = 2)

# example 3
# plotting the frequencies of the Zone Diameters for visual checking
# selecting the cells with Zone Diameters of a specific combination of Antimicrobial and Bacterium
ZDs <- subset(ZoneData, Antimicrobial == "Mecillinam" & Bacterium == "Escherichia coli",
              grepl("^Z", colnames(ZoneData)))

example <- data.frame(ZD = as.integer(gsub("^Z", "", colnames(ZDs))), # creating a dataframe
                      Freq = unname(unlist(ZDs)))

plot(Freq ~ ZD, data = example, type = "h") #plotting the frequencies of the Zone Diameters

# after the visual checking of the plot it cannot be decided clearly how many components there are,
# so several k will be tried out
# 1 component
est1 <- EM_Gamma(ZoneData = ZoneData, Anti = "Mecillinam", Bac = "Escherichia coli",
                 k = 1, epsilon = 0.001)
# 2 components
est2 <- EM_Gamma(ZoneData = ZoneData, Anti = "Mecillinam", Bac = "Escherichia coli",
                 k = 2, epsilon = 0.001)
# 3 components
est3 <- EM_Gamma(ZoneData = ZoneData, Anti = "Mecillinam", Bac = "Escherichia coli",
                 k = 3, epsilon = 0.001)

# comparing the BIC and the AIC to figure out the best solution
est1
est2
est3 # according to BIC and AIC the distribution with 3 components is the best solution

# geting the theoretical data values for the histogramm
Data <- unname(unlist(ZDs))[-1]
dia <- as.integer(gsub("^Z", "", colnames(ZDs)))[-1]

y <- vector("numeric")

for (i in 1:length(Data)) {
  if (Data[i] == 1) {
    y <- c(y, dia[i])
  } else{
    y <- c(y, seq(dia[i]-0.5, dia[i]+0.5, length.out = Data[i]))
  }
}

# plotting the histogramm of the data
hist(y, breaks=seq(0,50,length=50), freq = FALSE, main="Mecillinam & Escherichia coli",
     xlab="Zone Diameter", ylab="Density")

# plotting the fitted densities
legend('topright', legend=c("k = 1", "k = 2", "k = 3"), lty=1, col=c('black', 'red', 'green'),
       bty='n', lwd = 2)
lines(seq(0, 50, length = 1000),
      est1$Pi[1]*dgamma(seq(0, 50, length = 1000), shape = est1$Alpha[1], rate = est1$Beta[1]),
      lwd = 2)

lines(seq(0, 50, length = 1000),
      est2$Pi[1]*dgamma(seq(0, 50, length = 1000), shape = est2$Alpha[1], rate = est2$Beta[1])
      +est2$Pi[2]*dgamma(seq(0, 50, length = 1000), shape = est2$Alpha[2], rate = est2$Beta[2]),
      type = "l", col="red", lwd = 2)

lines(seq(0, 50, length = 1000),
      est3$Pi[1]*dgamma(seq(0, 50, length = 1000), shape = est3$Alpha[1], rate = est3$Beta[1])
      +est3$Pi[2]*dgamma(seq(0, 50, length = 1000), shape = est3$Alpha[2], rate = est3$Beta[2])
      +est3$Pi[3]*dgamma(seq(0, 50, length = 1000), shape = est3$Alpha[3], rate = est3$Beta[3]),
      type = "l", col="green", lwd = 2)
}
